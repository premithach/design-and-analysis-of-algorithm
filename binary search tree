//creating a node, searching a key, inorder traversal 
#include <iostream>
using namespace std;
struct node {
int key;
struct node *left, *right;
};
struct node *newNode(int item) {
struct node *temp = new (node);
temp->key = item;
temp->left = temp->right = NULL;
return temp;
}
void inorder(struct node *root) {
if (root != NULL)
{
inorder(root->left);
cout << root->key << " -> ";
inorder(root->right);
}
}
struct node *insert(struct node *node, int key) {
if (node == NULL) return newNode(key);
if (key < node->key)
node->left = insert(node->left, key);
else
node->right = insert(node->right, key);
return node;
}
bool search(struct node* root, int value) {
while (root != NULL)
{
if ((int) root->key == value)
return true;
if (value < (int) root->key)
root = root->left;
else
root = root->right;
}
return false;
}
int main() {
int value;
struct node *root = NULL;
root = insert(root, 8);
root = insert(root, 3);
root = insert(root, 1);
root = insert(root, 6);
root = insert(root, 7);
root = insert(root, 10);
root = insert(root, 14);
root = insert(root, 4);
cout<<"Enter value to be searched:";
cin>>value;
if(search( root,value)==1)
cout<<"Element is present in the BST"<<endl;
else
cout<<"Element is not present in the the BST"<<endl;
cout << "Inorder traversal: ";
inorder(root);
}
